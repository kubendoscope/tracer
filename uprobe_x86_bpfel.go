// Code generated by bpf2go; DO NOT EDIT.
//go:build (386 || amd64) && linux

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type uprobeAddressInfo struct {
	Family uint32
	Saddr4 uint32
	Daddr4 uint32
	Saddr6 [16]uint8
	Daddr6 [16]uint8
	Sport  uint16
	Dport  uint16
}

type uprobeGoTlsEvent struct {
	OrderIndex  uint64
	Goid        uint64
	TsNs        uint64
	Fd          uint32
	Pid         uint32
	Tid         uint32
	AddressInfo uprobeAddressInfo
	DataLen     int32
	EventType   uint8
	Comm        [16]int8
	Data        [17408]int8
}

// loadUprobe returns the embedded CollectionSpec for uprobe.
func loadUprobe() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_UprobeBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load uprobe: %w", err)
	}

	return spec, err
}

// loadUprobeObjects loads uprobe and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*uprobeObjects
//	*uprobePrograms
//	*uprobeMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadUprobeObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadUprobe()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// uprobeSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type uprobeSpecs struct {
	uprobeProgramSpecs
	uprobeMapSpecs
	uprobeVariableSpecs
}

// uprobeProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type uprobeProgramSpecs struct {
	GotlsReadRegister     *ebpf.ProgramSpec `ebpf:"gotls_read_register"`
	GotlsReadRetRegister  *ebpf.ProgramSpec `ebpf:"gotls_read_ret_register"`
	GotlsReadRetStack     *ebpf.ProgramSpec `ebpf:"gotls_read_ret_stack"`
	GotlsReadStack        *ebpf.ProgramSpec `ebpf:"gotls_read_stack"`
	GotlsWriteRegister    *ebpf.ProgramSpec `ebpf:"gotls_write_register"`
	GotlsWriteRetRegister *ebpf.ProgramSpec `ebpf:"gotls_write_ret_register"`
	GotlsWriteRetStack    *ebpf.ProgramSpec `ebpf:"gotls_write_ret_stack"`
	GotlsWriteStack       *ebpf.ProgramSpec `ebpf:"gotls_write_stack"`
	SysEnterRead          *ebpf.ProgramSpec `ebpf:"sys_enter_read"`
	SysEnterRecvfrom      *ebpf.ProgramSpec `ebpf:"sys_enter_recvfrom"`
	SysEnterSendto        *ebpf.ProgramSpec `ebpf:"sys_enter_sendto"`
	SysEnterWrite         *ebpf.ProgramSpec `ebpf:"sys_enter_write"`
	SysExitRead           *ebpf.ProgramSpec `ebpf:"sys_exit_read"`
	SysExitWrite          *ebpf.ProgramSpec `ebpf:"sys_exit_write"`
	TcpCleanupRbuf        *ebpf.ProgramSpec `ebpf:"tcp_cleanup_rbuf"`
	TcpSendmsg            *ebpf.ProgramSpec `ebpf:"tcp_sendmsg"`
}

// uprobeMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type uprobeMapSpecs struct {
	Events                     *ebpf.MapSpec `ebpf:"events"`
	GlobalOrderCounter         *ebpf.MapSpec `ebpf:"global_order_counter"`
	GotlsConnAddressMap        *ebpf.MapSpec `ebpf:"gotls_conn_address_map"`
	GotlsReadContext           *ebpf.MapSpec `ebpf:"gotls_read_context"`
	GotlsReadPidFdMap          *ebpf.MapSpec `ebpf:"gotls_read_pid_fd_map"`
	GotlsReadPidfdAddrinfoMap  *ebpf.MapSpec `ebpf:"gotls_read_pidfd_addrinfo_map"`
	GotlsWriteContext          *ebpf.MapSpec `ebpf:"gotls_write_context"`
	GotlsWritePidFdMap         *ebpf.MapSpec `ebpf:"gotls_write_pid_fd_map"`
	GotlsWritePidfdAddrinfoMap *ebpf.MapSpec `ebpf:"gotls_write_pidfd_addrinfo_map"`
	GteContextGen              *ebpf.MapSpec `ebpf:"gte_context_gen"`
}

// uprobeVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type uprobeVariableSpecs struct {
	InvalidFd *ebpf.VariableSpec `ebpf:"invalid_fd"`
}

// uprobeObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadUprobeObjects or ebpf.CollectionSpec.LoadAndAssign.
type uprobeObjects struct {
	uprobePrograms
	uprobeMaps
	uprobeVariables
}

func (o *uprobeObjects) Close() error {
	return _UprobeClose(
		&o.uprobePrograms,
		&o.uprobeMaps,
	)
}

// uprobeMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadUprobeObjects or ebpf.CollectionSpec.LoadAndAssign.
type uprobeMaps struct {
	Events                     *ebpf.Map `ebpf:"events"`
	GlobalOrderCounter         *ebpf.Map `ebpf:"global_order_counter"`
	GotlsConnAddressMap        *ebpf.Map `ebpf:"gotls_conn_address_map"`
	GotlsReadContext           *ebpf.Map `ebpf:"gotls_read_context"`
	GotlsReadPidFdMap          *ebpf.Map `ebpf:"gotls_read_pid_fd_map"`
	GotlsReadPidfdAddrinfoMap  *ebpf.Map `ebpf:"gotls_read_pidfd_addrinfo_map"`
	GotlsWriteContext          *ebpf.Map `ebpf:"gotls_write_context"`
	GotlsWritePidFdMap         *ebpf.Map `ebpf:"gotls_write_pid_fd_map"`
	GotlsWritePidfdAddrinfoMap *ebpf.Map `ebpf:"gotls_write_pidfd_addrinfo_map"`
	GteContextGen              *ebpf.Map `ebpf:"gte_context_gen"`
}

func (m *uprobeMaps) Close() error {
	return _UprobeClose(
		m.Events,
		m.GlobalOrderCounter,
		m.GotlsConnAddressMap,
		m.GotlsReadContext,
		m.GotlsReadPidFdMap,
		m.GotlsReadPidfdAddrinfoMap,
		m.GotlsWriteContext,
		m.GotlsWritePidFdMap,
		m.GotlsWritePidfdAddrinfoMap,
		m.GteContextGen,
	)
}

// uprobeVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadUprobeObjects or ebpf.CollectionSpec.LoadAndAssign.
type uprobeVariables struct {
	InvalidFd *ebpf.Variable `ebpf:"invalid_fd"`
}

// uprobePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadUprobeObjects or ebpf.CollectionSpec.LoadAndAssign.
type uprobePrograms struct {
	GotlsReadRegister     *ebpf.Program `ebpf:"gotls_read_register"`
	GotlsReadRetRegister  *ebpf.Program `ebpf:"gotls_read_ret_register"`
	GotlsReadRetStack     *ebpf.Program `ebpf:"gotls_read_ret_stack"`
	GotlsReadStack        *ebpf.Program `ebpf:"gotls_read_stack"`
	GotlsWriteRegister    *ebpf.Program `ebpf:"gotls_write_register"`
	GotlsWriteRetRegister *ebpf.Program `ebpf:"gotls_write_ret_register"`
	GotlsWriteRetStack    *ebpf.Program `ebpf:"gotls_write_ret_stack"`
	GotlsWriteStack       *ebpf.Program `ebpf:"gotls_write_stack"`
	SysEnterRead          *ebpf.Program `ebpf:"sys_enter_read"`
	SysEnterRecvfrom      *ebpf.Program `ebpf:"sys_enter_recvfrom"`
	SysEnterSendto        *ebpf.Program `ebpf:"sys_enter_sendto"`
	SysEnterWrite         *ebpf.Program `ebpf:"sys_enter_write"`
	SysExitRead           *ebpf.Program `ebpf:"sys_exit_read"`
	SysExitWrite          *ebpf.Program `ebpf:"sys_exit_write"`
	TcpCleanupRbuf        *ebpf.Program `ebpf:"tcp_cleanup_rbuf"`
	TcpSendmsg            *ebpf.Program `ebpf:"tcp_sendmsg"`
}

func (p *uprobePrograms) Close() error {
	return _UprobeClose(
		p.GotlsReadRegister,
		p.GotlsReadRetRegister,
		p.GotlsReadRetStack,
		p.GotlsReadStack,
		p.GotlsWriteRegister,
		p.GotlsWriteRetRegister,
		p.GotlsWriteRetStack,
		p.GotlsWriteStack,
		p.SysEnterRead,
		p.SysEnterRecvfrom,
		p.SysEnterSendto,
		p.SysEnterWrite,
		p.SysExitRead,
		p.SysExitWrite,
		p.TcpCleanupRbuf,
		p.TcpSendmsg,
	)
}

func _UprobeClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed uprobe_x86_bpfel.o
var _UprobeBytes []byte
